#!/bin/bash

# ************************************************************************************************************
#                                                  Cerebro
# Tool for identifying and annotating all mutations in a set of mutant genomes compared to a reference genome.
# ************************************************************************************************************
# Developed by Eoghan Reilly eoghan@food.ku.dk
# ************************************************************

# Set defaults for command line arguments
input_dir="./"
output_dir="cerebro_output"
threads=20
functional_annotation=false
# Parse command-line arguments
while getopts "i:o:fh" opt; do
  case $opt in
    i) input_dir="$OPTARG" ;;
    o) output_dir="$OPTARG" ;;
    t) threads="$OPTARG" ;;
    f) functional_annotation=true ;;
    h) echo -e "\n    
***************
Cerebro - Mutation Analysis Script
***************
This script is used for identifying and annotating all point mutations in a set of mutant genomes compared to a reference genome.
If amino acid sequences are also provided, an output fasta of the mutated proteins is produced that can be used for functional annotation with eggnog mapper.

Requirements:
1. Input directory containing:
    - assembled mutant genomes
        - format: *.fasta
    - one reference genome
        - format: ref*.fasta
    - gene annotations for the reference genome
        - format: *.gff
    - protein sequences corresponding to reference annotations (optional, for functional annotation)
        - format: *.ffn
4. NUCmer and BEDtools installed and accessible in the PATH.
5. GNU parallel installed and accessible in the PATH.
************************************************************
Developed by Eoghan Reilly eoghan@food.ku.dk
************************************************************\n \
                \nUsage - cerebro [OPTIONS]\n \
                \nOptions: \
                \n\t -i\t input directory (default: current directory)\
                \n\t -o\t output directory for results (default: cerebro_output)\
                \n\t -t\t number of threads to use for parallel processing (default: 20)\
                \n\t -f\t use this flag to also produce output fasta of mutated proteins for functional annotation\
                \n\t -h\t display this help message and exit\n\n\
                " && exit 0 ;;
    \?) echo "Invalid option. use -h flag for usage info" >&2 && exit 1 ;;
  esac
done   

# make sure input directory contains the required files
if [ ! -d "$input_dir" ]; then
    echo "Input directory $input_dir does not exist. Please provide a valid directory."
    exit 1
fi
if [ -z "$(ls ${input_dir}/*.fasta 2>/dev/null)" ]; then
    echo "No FASTA files found in the input directory $input_dir. Please provide valid FASTA files."
    exit 1
fi
if [ -z "$(ls ${input_dir}/ref*.fasta 2>/dev/null)" ]; then
    echo "No reference genome found in the input directory $input_dir. Please provide a valid reference genome file starting with 'ref'."
    exit 1
fi
if [ $(ls ${input_dir}/ref*.fasta | wc -l) -ne 1 ]; then
    echo "Multiple reference genomes found in the input directory $input_dir. Please ensure there is only one reference genome file starting with 'ref'."
    exit 1
fi
if [ -z "$(ls ${input_dir}/*.gff 2>/dev/null)" ]; then
    echo "No GFF annotation file found in the input directory $input_dir. Please provide a valid GFF file."
    exit 1
fi

# Change to the input directory
input_dir=$(readlink -f "$input_dir")
cd ${input_dir}
# Create output directory if it doesn't exist
mkdir -p ${output_dir}
output_dir=$(readlink -f "$output_dir")

# Align mutant genomes to the reference genome
awk -F'\t' '$3 == "CDS" || $3 == "misc_RNA" || $3 == "rRNA" || $3 == "tRNA"  {gsub(/ /, "_", $9); \
    print $1, $4-1, $5, $9";Feature_Type="$3}' OFS='\t' *.gff > genes.bed
echo "Aligning all genomes to reference genome"
parallel --max-procs ${threads} --no-notice "nucmer -p {.} ref*.fasta {}" ::: *.fasta

# Extract and parse SNPs and indels
parallel --max-procs ${threads} --no-notice "show-snps -Clr {} > {.}.txt" ::: *.delta
parallel --max-procs ${threads} --no-notice "tail -n +6 {} > ${output_dir}/{.}.tsv" ::: *.txt
rm *.delta *.txt
cd ${output_dir}
for file in $(ls *.tsv); do
    awk '$2 != "." && $3 != "." {print $14, $1-1, $1, "SNP_"NR, $2, ">", $3}' OFS='\t' $file > $(basename $file .tsv).bed
    awk '$2 == "." {print $14, $1-1, $1, "insertion_"NR, $2, ">", $3}' OFS='\t' $file >> $(basename $file .tsv).bed
    awk '$3 == "." {print $14, $1-1, $1, "deletion_"NR, $2, ">", $3}' OFS='\t' $file >> $(basename $file .tsv).bed
done
rm *.tsv

# Find intersections of genomic variants with gene annotations
parallel --max-procs ${threads} --no-notice "bedtools intersect -a {} -b ${input_dir}/genes.bed -wo > {.}_variants.tsv" ::: *.bed
rm *.bed
rm ${input_dir}/genes.bed

# Loop through all mutation files and create summary table
for file in *.tsv; do
    mutant=$(basename "$file" | cut -d'_' -f1)    # Extract mutant name from filename
    ref=$(basename ../ref*.fasta .fasta)  # Get the reference genome name
    awk -v m="$mutant" -v r="$ref" '
    {
        print m, r, $4, $2, $3, $11;
    }' OFS='\t' "$file" >> mutation_summary.tsv
done

rm *variants.tsv

# Process the summary file to extract desired information from the last column
awk -F'\t' 'BEGIN {OFS="\t"} 
{
    gene="NA"; product="NA"; Feature_Type="NA";Locus_Tag="NA";

    # Extract gene, product, locus tag and feature type from the last column
    if ($NF ~ /gene=[^;]+/) {
        match($NF, /gene=([^;]+)/, arr);
        gene=arr[1];
    }

    if ($NF ~ /product=[^;]+/) {
        match($NF, /product=([^;]+)/, arr);
        product=arr[1];
    }

    if ($NF ~ /Feature_Type=[^;]+/) {
        match($NF, /Feature_Type=([^;]+)/, arr);
        Feature_Type=arr[1];
    }

    if ($NF ~ /locus_tag=[^;]+/) {
        match($NF, /locus_tag=([^;]+)/, arr);
        Locus_Tag=arr[1];
    }

    # Print all original columns except the last one, plus gene and product
    for (i=1; i<NF; i++) printf "%s\t", $i;
    print gene, product, Feature_Type, Locus_Tag;
}' mutation_summary.tsv >> mutation_table.tsv

rm mutation_summary.tsv

# Read the header and write it to the output file, adding size column
echo -e "Mutant\tReference\tMutation\tStartPos\tEndPos\tGene\tProduct\tFeature_Type\tLocus_Tag\tMutation_Size" > mutations.tsv

awk 'BEGIN {OFS="\t"} {sub(/_.*/, "", $3); print}' mutation_table.tsv > fixed_table.tsv
rm mutation_table.tsv

# Merge consecutive indels into single entries
awk -F'\t' 'BEGIN {OFS="\t"}
{
    # If this is the first row, store the first indel entry
    if (NR == 1) {
        mutant=$1; ref=$2; mutation=$3;
        start=$4; end=$5; gene=$6;
        product=$7; feature=$8; Locus_Tag=$9;
        size = end - start;
        next;
    }

    # If the current row matches the previous row (same mutant, type, consecutive positions)
    if ($1 == mutant && $3 == mutation && $4 == end) {
        end = $5;  # Extend the end position
        size++;    # Increase the size
    } else {
        # Print the previous merged indel
        print mutant, ref, mutation, start, end, gene, product, feature, Locus_Tag, size;

        # Start a new indel entry
        mutant=$1; ref=$2; mutation=$3;
        start=$4; end=$5; gene=$6;
        product=$7; feature=$8; Locus_Tag=$9;
        size = end - start;
    }
}
# Print the last merged indel
END {print mutant, ref, mutation, start, end, gene, product, feature, Locus_Tag, size}' fixed_table.tsv >> mutations.tsv
rm fixed_table.tsv
echo "Merging complete. Output saved to mutations.tsv"

# Perform functional annotation if requested
if [ "$functional_annotation" = false ]; then
    echo "Pipeline completed! Results saved in $output_dir"
    exit 0
else
    echo "Extracting mutated proteins..."
fi

# remove newlines from sequences in .faa file
awk '/^>/ {print (NR==1?"":"\n") $0; next} {printf "%s", $0} END {print ""}' ${input_dir}/*.ffn > all_proteins.fa

# extract relevant proteins
awk -F'\t' 'NR>1 {print $9}' mutations.tsv | while read id; do grep -A 1 ${id} all_proteins.fa >> relevant_proteins.fa; done

# remove duplicate proteins from fasta file
seqkit rmdup relevant_proteins.fa > eggnog_proteins.fa

# translate nucleotide sequence to protein sequence
seqkit translate eggnog_proteins.fa -o eggnog_proteins.faa

# delete intermediate files
rm eggnog_proteins.fa all_proteins.fa relevant_proteins.fa

###
### Can uncomment the following lines if you wish to perform functional analysis on the command line (eggnog-mapper tool must be installed)
### But the webtool is much much much faster
###

# # create output directory for eggnog results
# mkdir -p ${output_dir}/emapper_results/
# mkdir -p ${output_dir}/tmp/
# # run eggnog mapper on extracted proteins
# emapper.py \
#     --cpu ${threads} \
#     --mp_start_method forkserver \
#     -o out \
#     --output_dir ${output_dir}/emapper_results/ \
#     --temp_dir ${output_dir}/tmp/ \
#     --override -m diamond \
#     -i eggnog_proteins.fa \
#     --evalue 0.001 \
#     --score 60 \
#     --pident 40 \
#     --query_cover 20 \
#     --subject_cover 20 \
#     --itype proteins \
#     --tax_scope auto \
#     --target_orthologs all \
#     --go_evidence non-electronic \
#     --pfam_realign none 
#    # --excel > /emapper_web_jobs/emapper_jobs/user_data/MM_a5t2rwrw/emapper.out 2> /emapper_web_jobs/emapper_jobs/user_data/MM_a5t2rwrw/emapper.err

# mv ${output_dir}/emapper_results/*.annotations ${output_dir}/emapper_annotations.tsv
# rm -r ${output_dir}/tmp ${output_dir}/emapper_results

# head -n -3 ${output_dir}/emapper_annotations.tsv | tail -n +5 > ${output_dir}/functional_annotations.tsv
# rm ${output_dir}/emapper_annotations.tsv

# Rscript merge_tables.R

echo "Pipeline finished successfully! The eggnog_proteins.fa file can be uploaded to http://eggnog-mapper.embl.de/FESNOV to obtain functional annotations. The resulting annotations.tsv file can then be merged with the mutations.tsv file using the cerebro_merge_tables.sh script."